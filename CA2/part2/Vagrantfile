# See: https://manski.net/2016/09/vagrant-multi-machine-tutorial/
# for information about machine names on private network
Vagrant.configure("2") do |config|
  config.ssh.forward_agent = true
  config.vm.box = "ubuntu/bionic64"

  # This provision is common for both VMs
  config.vm.provision "shell", inline: <<-SHELL
    sudo apt-get update -y
    sudo apt-get install -y tomcat9 tomcat9-admin
    sudo apt-get install -y iputils-ping avahi-daemon libnss-mdns unzip \
        openjdk-17-jdk-headless
    # ifconfig
  SHELL

  #============
  # Configurations specific to the database VM
  config.vm.define "db" do |db|
    db.vm.box = "ubuntu/bionic64"
    db.vm.hostname = "db"
    db.vm.network "private_network", ip: "192.168.56.11"

    # We want to access H2 console from the host using port 8082
    # We want to connet to the H2 server using port 9092
    db.vm.network "forwarded_port", guest: 8082, host: 8082
    db.vm.network "forwarded_port", guest: 9092, host: 9092

    # We need to download H2
    db.vm.provision "shell", inline: <<-SHELL
      wget https://repo1.maven.org/maven2/com/h2database/h2/1.4.200/h2-1.4.200.jar
    SHELL

    # The following provision shell will run ALWAYS so that we can execute the H2 server process
    # This could be done in a different way, for instance, setiing H2 as as service, like in the following link:
    # How to setup java as a service in ubuntu: http://www.jcgonzalez.com/ubuntu-16-java-service-wrapper-example
    #
    # To connect to H2 use: jdbc:h2:tcp://192.168.33.11:9092/./jpadb
    db.vm.provision "shell", :run => 'always', inline: <<-SHELL
      java -cp ./h2*.jar org.h2.tools.Server -web -webAllowOthers -tcp -tcpAllowOthers -ifNotExists > ~/out.txt &
    SHELL
  end

    # Configurations specific to the webserver VM
      config.vm.define "web" do |web|
        web.vm.hostname = "web"
        web.vm.network "private_network", ip: "192.168.56.10"
        web.vm.network "forwarded_port", guest: 8080, host: 8080
        # Sync the host's SSH key folder into the VM (read-only)
        web.vm.synced_folder "~/.ssh", "/home/vagrant/.ssh_host", type: "virtualbox"

        # Enable SSH agent forwarding (optional)
        web.ssh.forward_agent = true

        # Provisioning script for the web VM
        web.vm.provision "shell", privileged: false, inline: <<-SHELL
          # Copy the SSH private key and set correct permissions
          cp /home/vagrant/.ssh_host/id_ed25519 ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          # Trust GitHub host to avoid SSH warnings
          ssh-keyscan github.com >> ~/.ssh/known_hosts

          # Clone the repository only if it doesn't exist
          if [ ! -d "devops-24-25-1241919" ]; then
            git clone git@github.com:NunoNC/devops-24-25-1241919.git
          fi

          cd devops-24-25-1241919/CA1/part3/react-and-spring-data-rest-basic
          chmod u+x gradlew
          ./gradlew clean build
          ./gradlew bootRun
          # Deploy the WAR to Tomcat
          sudo cp ./build/libs/react-and-spring-data-rest-basic-0.0.1-SNAPSHOT.jar /var/lib/tomcat9/webapps
        SHELL
      end
    end
